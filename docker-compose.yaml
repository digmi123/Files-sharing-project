---
services:
  frontend:
    container_name: frontend
    hostname: frontend
    image: node:alpine
    depends_on:
      - backend
      - db
    network_mode: "host"
    env_file: ./conf/app.env
    environment:
      API_PORT: "${API_PORT:-5000}"
      API_ADDRESS: "${API_ADDRESS:-backend}"
      UI_PORT: "${UI_PORT:-3000}"
    ports:
      - "0.0.0.0:${UI_PORT:-80}:80"
    volumes:
      - type: bind
        source: "./client"
        target: "/app"
    working_dir: "/app"
    entrypoint: ""
    command: [ "sh", "-c", "npm install --global && npm install --global serve && npm run build && serve --single build --listen 80" ]

  backend:
    container_name: backend
    hostname: backend
    image: node:alpine
    depends_on:
      - db
    network_mode: "host"
    env_file:
      - ./conf/db.env
      - ./conf/app.env
      - ./conf/secrets.env
    volumes:
      - type: bind
        source: "./server"
        target: "/app"
    working_dir: "/app"
    entrypoint: ""
    environment:
      PORT: "${API_PORT:-5000}"
    ports:
      - "0.0.0.0:${API_PORT:-5000}:${API_PORT:-5000}"
    command: [ "sh", "-c", "npm install --global && npm start" ]

  db:
    container_name: db
    hostname: db
    image: mysql:latest
    env_file: ./conf/db.env
    environment:
      MYSQL_TCP_PORT: "${DB_PORT:-3306}"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    network_mode: "host"
    volumes:
      - type: bind
        source: "./sql"
        target: "/docker-entrypoint-initdb.d"
        read_only: true
      - type: volume
        source: db_data
        target: /var/lib/mysql
    restart: on-failure

volumes:
  db_data:
  files_data:
